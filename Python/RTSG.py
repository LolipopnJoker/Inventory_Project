"""RTSG - Random Timestamps Generator

Currently there are two functions in this script, each randomly generates different kind of timestamp (one generates dates, the second generates time).
In future updates I am planning to add a third function that will randomly generate a full timestamp (both date and time).
"""

#Imports
import random
import datetime

"""Functions that genreate random timestamps"""

def random_date_generator(start_year: int, start_month: int, start_day: int, end_year: int, end_month: int, end_day: int) -> datetime.date:
    """Generates random datestamp.

    Parameters
    ----------
    start_year: int
        Year to begin with.
    start_month: int
        Month to begin with.
    start_day: int
        Day to begin with.
    end_year: int
        Last year.
    end_month: int
        Last month.
    end_day: int
        Last day.

    Returns
    -------
    datetime.date
        Represents a date (year, month and day) in an idealized calendar. Because of the structure of the function, this date has to be between the start and end dates.
    """
    
    start_date = datetime.date(start_year, start_month, start_day)
    end_date = datetime.date(end_year, end_month, end_day)

    time_between_dates = end_date - start_date
    days_between_dates = time_between_dates.days
    random_number_of_days = random.randrange(days_between_dates)
    random_date = start_date + datetime.timedelta(days=random_number_of_days)

    return random_date

def random_timestamp_generator(opening_hour: int, opening_minute: int, opnening_second: int, closing_hour: int, closing_minute: int, closing_second: int):
    """Generates random datestamp.

    Parameters
    ----------
    opening_hour: int
        Hour to begin with.
    opening_minute: int
        Minute to begin with.
    opnening_second: int
        Second to begin with.
    closing_hour: int
        Last hour.
    closing_minute: int
        Last minute.
    closing_second: int
        Last second.

    Returns
    -------
    datetime.time
        Represents a (local) time of day, independent of any particular day. Because of the structure of the function, the timestamp generated by this
        function has to be between the start and end timestamps.
    """
    
    random_hour = random.randint(opening_hour, closing_hour)
    
    # The following if statement forces the random timestamp to be between the opening and closing hours.
    if random_hour == opening_hour:
        random_minute = random.randint(opening_minute, 59)
        random_second = random.randint(opnening_second, 59)
    elif random_hour == closing_hour:
        random_minute = random.randint(0, closing_minute)
        random_second = random.randint(0, closing_second)
    else:
        random_minute = random.randint(0, 59)
        random_second = random.randint(0, 59) 
    
    random_timestamp = datetime.time(random_hour, random_minute, random_second)

    return random_timestamp